#suite sprintf_test_d

#test s21_sprintf_d_1
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%+d", 12345), s21_sprintf(resorig, "%+d", 12345));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_2
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%-13d", 12345), s21_sprintf(resorig, "%-13d", 12345));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_3
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%0.d", 0), s21_sprintf(resorig, "%0.d", 0));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_4
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%+d", 2147483647), s21_sprintf(resorig, "%+d", 2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_5
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%-20d", -2147483647), s21_sprintf(resorig, "%-20d", -2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_6
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%20d", -2147483647), s21_sprintf(resorig, "%20d", -2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_7
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "% d", 2147483647), s21_sprintf(resorig, "% d", 2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_8
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%0.15d", 2147483647), s21_sprintf(resorig, "%0.15d", 2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_9
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%-+20d", 2147483647), s21_sprintf(resorig, "%-+20d", 2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_10
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%+-20d", 2147483647), s21_sprintf(resorig, "%+-20d", 2147483647));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_11
  char format[] = "%- d |%- 15d|#|%- .7d| test %- d";
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, format, -334, -332, 1, 1234567890), s21_sprintf(resorig, format, -334, -332, 1, 1234567890));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_12
  char *format = "%- d |% 15d|#|%- .7d| test %-d";
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, format, -334, -332, 1, 1234567890), s21_sprintf(resorig, format, -334, -332, 1, 1234567890));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_13
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%-40ld%40ld", 4294967295444444444,4294967295678909876), s21_sprintf(resorig, "%-40ld%40ld", 4294967295444444444, 4294967295678909876));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_14
  char format[] = "%- 1.3d% -1.4d% -1.5d%- 1.6d% -1.7d% -6.8d% -1.9d";
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, format, 'H', 'a', 'm', 'l', 'e', 't', '!'), s21_sprintf(resorig, format, 'H', 'a', 'm', 'l', 'e', 't', '!'));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_15
  char format[] = "%0.0d%0d%0d%0d%0d%0d%0d%.*d";
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, format, '\0', '\n', '\t', '1', '9', '*', '#', 1, 1990), s21_sprintf(resorig, format, '\0', '\n', '\t', '1', '9', '*', '#', 1, 1990));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_16
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%-*d%*d", 27, 1, 27, 1), s21_sprintf(resorig, "%-*d%*d", 27, 1, 27, 1));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_17
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%%%d%%%%%22.*d", 1, 27, 1), s21_sprintf(resorig, "%%%d%%%%%22.*d", 1, 27, 1));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_hd_18
  short i = 11;
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%+hd%20hd%+-15.5hd", i, i, i), s21_sprintf(resorig, "%+hd%20hd%+-15.5hd", i, i, i));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_19
  short i = 11;
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%hd%s%ld%s%d", i, "short", 271219902712,"LONG", 1990), s21_sprintf(resorig, "%hd%s%ld%s%d", i, "short", 271219902712, "LONG", 1990));
  ck_assert_str_eq(res, resorig);

#test s21_sprintf_d_20
  short a = 11;
  long b = 12345678901;
  int c = 0x77;
  char res[200] = "\0";
  char resorig[200] = "\0";
  ck_assert_int_eq(sprintf(res, "%hd%s%ld%s%d", a, "short", b, "LONG", c), s21_sprintf(resorig, "%hd%s%ld%s%d", a, "short", b, "LONG", c));
  ck_assert_str_eq(res, resorig);