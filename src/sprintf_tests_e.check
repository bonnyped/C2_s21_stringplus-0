#suite s21_sprintf_tests_e

#test test_1
double a = 777.0;
char res[200];
char resorig[200];
ck_assert_pstr_eq(s21_sprintf(res, "%e", a), sprintf(resorig, "%e", a));

#test test_2
float a = 777.0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%30e", a), sprintf(resorig, "%30e", a));
ck_assert_pstr_eq(res, resorig);

#test test_3
double a = 777.0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.30e", a), sprintf(resorig, "%.30e", a));
ck_assert_pstr_eq(res, resorig);

#test test_4
float a = 777.0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%5.30e", a), sprintf(resorig, "%5.30e", a));
ck_assert_pstr_eq(res, resorig);

#test test_5
double a = 100;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.0e", a), sprintf(resorig, "%.0e", a));
ck_assert_pstr_eq(res, resorig);

#test test_6
long double a = 777.777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%Le", a), sprintf(resorig, "%Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_7
long double a = 777.777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%30.40Le", a), sprintf(resorig, "%30.40Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_8
long double a = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%+2.0Le", a), sprintf(resorig, "%+2.0Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_9
long double a = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-200.0Le", a), sprintf(resorig, "%-200.0Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_10
long double a = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%- 2.0Le", a), sprintf(resorig, "%- 2.0Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_11
long double a = -777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%- 2.0Le", a), sprintf(resorig, "%- 2.0Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_12
long double a = -777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#- 2.0Le", a), sprintf(resorig, "%#- 2.0Le", a));
ck_assert_pstr_eq(res, resorig);

#test test_13
float a = 100;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#-+*.*e", 1, 2, a), sprintf(resorig, "%#-+*.*e", 1, 2, a));
ck_assert_pstr_eq(res, resorig);

#test test_14
float a = 123.321;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#+*.*e", 1, 1, a), sprintf(resorig, "%#+*.*e", 1, 1, a));
ck_assert_pstr_eq(res, resorig);

#test test_15
float a = 123.321;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.3e", 1, a), sprintf(resorig, "%*.3e", 1, a));
ck_assert_pstr_eq(res, resorig);

#test test_16
double a = 123.321;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.e", 1, a), sprintf(resorig, "%*.e", 1, a));
ck_assert_pstr_eq(res, resorig);