#suite s21_sprintf_tests_s

#test test_1
char a[50] = "Hello";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%s", a), sprintf(resorig, "%s", a));
ck_assert_pstr_eq(res, resorig);

#test test_2
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.2s%.2s", a, b), sprintf(resorig, "%.2s%.2s", a, b));
ck_assert_pstr_eq(res, resorig);

#test test_3
char a[50] = "Hello";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%s", &a[1]), sprintf(resorig, "%s", &a[1]));
ck_assert_pstr_eq(res, resorig);
#test s_with_wide_chars_width_and_accuracy
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%10.1ls", z), sprintf(resorig,"%10.1ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_4
char a[50] = "Hello";
char res[200];
char resorig[200];
if(a){
ck_assert_int_eq(s21_sprintf(res, "%s", &a[s21_strlen(a) - 1]), sprintf(resorig, "%s", &a[s21_strlen(a) - 1]));
}
ck_assert_pstr_eq(res, resorig);

#test test_5
char a[50] = "Hello";
char res[200];
char resorig[200];
if(a){
ck_assert_int_eq(s21_sprintf(res, "%s", &a[s21_strlen(a)]), sprintf(resorig, "%s", &a[s21_strlen(a)]));
}
ck_assert_pstr_eq(res, resorig);

#test test_6
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.0s%.0s", a, b), sprintf(resorig, "%.0s%.0s", a, b));
ck_assert_pstr_eq(res, resorig);

#test test_7
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.*s%.*s", 0, a, 2, b), sprintf(resorig, "%.*s%.*s", 0, a, 0, b));
ck_assert_pstr_eq(res, resorig);

#test test_8
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%1s%1s", a, b), sprintf(resorig, "%1s%1s",a, b));
ck_assert_pstr_eq(res, resorig);

#test test_9
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*s%1s", 7, a, b), sprintf(resorig, "%*s%1s", 7, a, b));
ck_assert_pstr_eq(res, resorig);

#test test_10
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-115s%-10s", a, b), sprintf(resorig, "%-115s%-10s", a, b));
ck_assert_pstr_eq(res, resorig);

#test test_11
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%11s" "hello, i'm here! %-10s", a, b), sprintf(resorig, "%-115s%-10s", a, b%-115s%-10s", a, b));
ck_assert_pstr_eq(res, resorig);

#test test_12
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%7.3s" "Hi " "hello, i'm here %-10s", a, b), sprintf(resorig, "%7.3s" "Hi " "hello, i'm here %-10s", a, b));
ck_assert_pstr_eq(res, resorig);

#test test_13
char a[50] = "Hello";
char b[50] = " again";
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%11s" "hello, i'm here %-10s" "%s", a, b, "new_string"), sprintf(resorig, "%11s" "hello, i'm here %-10s" "%s", a, b, "new_string"));
ck_assert_pstr_eq(res, resorig);

#test test_14
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%ls", z), sprintf(resorig,"%ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_15
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%.1ls", z), sprintf(resorig,"%.1ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_16
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%15ls", z), sprintf(resorig,"%15ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_17
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%10.1ls", z), sprintf(resorig,"%10.1ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_18
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%-13.1ls", z), sprintf(resorig,"%-13.1ls", z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}

#test test_19
wchar_t *z;
z = malloc(sizeof(wchar_t) * 2);
z[0] = 1103;
z[1] = 0;

setlocale(LC_ALL, "");

ck_assert_int_eq(s21_sprintf(res, "%-*.1ls", 13, z), sprintf(resorig,"%-13.*ls", 1, z));
ck_assert_pstr_eq(res, resorig);
if(z){
    free(z);
}